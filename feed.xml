<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="https://m-usmansaeed.github.io/cwu/feed.xml" rel="self" type="application/atom+xml" /><link href="https://m-usmansaeed.github.io/cwu/" rel="alternate" type="text/html" /><updated>2024-05-05T10:39:07+05:00</updated><id>https://m-usmansaeed.github.io/cwu/feed.xml</id><title type="html">Code with Usman</title><author><name>Usman Saeed</name><email>itsusman.saeed@gmail.com</email></author><entry><title type="html">State Management in SwiftUI</title><link href="https://m-usmansaeed.github.io/cwu/2024/05/05/exploring-state-management-in-swiftui/" rel="alternate" type="text/html" title="State Management in SwiftUI" /><published>2024-05-05T00:00:00+05:00</published><updated>2024-05-05T00:00:00+05:00</updated><id>https://m-usmansaeed.github.io/cwu/2024/05/05/exploring-state-management-in-swiftui</id><content type="html" xml:base="https://m-usmansaeed.github.io/cwu/2024/05/05/exploring-state-management-in-swiftui/"><![CDATA[<p>State management is crucial in SwiftUI for building responsive and dynamic user interfaces. SwiftUI provides various property wrappers and techniques to handle state effectively, enabling you to create interactive applications.</p>

<h2 id="state">@State</h2>

<p>The <code class="language-plaintext highlighter-rouge">@State</code> property wrapper is fundamental for managing the state of a view. It allows a view to maintain and modify its internal state, triggering updates to the view whenever the state changes.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">SwiftUI</span>

<span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="kd">@State</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">count</span> <span class="o">=</span> <span class="mi">0</span>
    
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">VStack</span> <span class="p">{</span>
            <span class="kt">Text</span><span class="p">(</span><span class="s">"Count: </span><span class="se">\(</span><span class="n">count</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
            <span class="kt">Button</span><span class="p">(</span><span class="s">"Increment"</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In this example, <code class="language-plaintext highlighter-rouge">@State</code> is used to declare a property called <code class="language-plaintext highlighter-rouge">count</code>, which represents the number of times a button is tapped. Whenever the button is tapped, the <code class="language-plaintext highlighter-rouge">count</code> is incremented, and SwiftUI automatically updates the view to reflect the new count value.</p>

<p>Read more about <a href="https://developer.apple.com/documentation/swiftui/state">@State</a></p>

<h2 id="binding">@Binding</h2>

<p>The <code class="language-plaintext highlighter-rouge">@Binding</code> property wrapper establishes a two-way connection between a parent and a child view. It enables a child view to access and modify a value owned by its parent.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">DetailView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="kd">@Binding</span> <span class="k">var</span> <span class="nv">isPresented</span><span class="p">:</span> <span class="kt">Bool</span>
    
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">Button</span><span class="p">(</span><span class="s">"Dismiss"</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">isPresented</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="kd">@State</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">showModal</span> <span class="o">=</span> <span class="kc">false</span>
    
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">Button</span><span class="p">(</span><span class="s">"Show Detail"</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">showModal</span> <span class="o">=</span> <span class="kc">true</span>
        <span class="p">}</span>
        <span class="o">.</span><span class="nf">sheet</span><span class="p">(</span><span class="nv">isPresented</span><span class="p">:</span> <span class="err">$</span><span class="n">showModal</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">DetailView</span><span class="p">(</span><span class="nv">isPresented</span><span class="p">:</span> <span class="err">$</span><span class="n">showModal</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In this example, <code class="language-plaintext highlighter-rouge">@Binding</code> is used to pass the <code class="language-plaintext highlighter-rouge">showModal</code> state from the parent view (<code class="language-plaintext highlighter-rouge">ContentView</code>) to the child view (<code class="language-plaintext highlighter-rouge">DetailView</code>). When the “Dismiss” button is tapped in the <code class="language-plaintext highlighter-rouge">DetailView</code>, it updates the <code class="language-plaintext highlighter-rouge">showModal</code> state in the <code class="language-plaintext highlighter-rouge">ContentView</code>, closing the modal sheet.</p>

<p>Read more about <a href="https://developer.apple.com/documentation/swiftui/binding">@Binding</a></p>

<h2 id="observableobject-and-observedobject">ObservableObject and @ObservedObject</h2>

<p>The <code class="language-plaintext highlighter-rouge">ObservableObject</code> protocol, combined with <code class="language-plaintext highlighter-rouge">@ObservedObject</code>, enables reactive data management in SwiftUI. It allows views to observe and react to changes in an object’s state.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">SwiftUI</span>

<span class="kd">class</span> <span class="kt">UserData</span><span class="p">:</span> <span class="kt">ObservableObject</span> <span class="p">{</span>
    <span class="kd">@Published</span> <span class="k">var</span> <span class="nv">username</span> <span class="o">=</span> <span class="s">"JohnDoe"</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="kd">@ObservedObject</span> <span class="k">var</span> <span class="nv">userData</span> <span class="o">=</span> <span class="kt">UserData</span><span class="p">()</span>
    
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">VStack</span> <span class="p">{</span>
            <span class="kt">Text</span><span class="p">(</span><span class="s">"Welcome, </span><span class="se">\(</span><span class="n">userData</span><span class="o">.</span><span class="n">username</span><span class="se">)</span><span class="s">!"</span><span class="p">)</span>
            <span class="kt">TextField</span><span class="p">(</span><span class="s">"Enter your name"</span><span class="p">,</span> <span class="nv">text</span><span class="p">:</span> <span class="err">$</span><span class="n">userData</span><span class="o">.</span><span class="n">username</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In this example, <code class="language-plaintext highlighter-rouge">UserData</code> is an observable object with a published property called <code class="language-plaintext highlighter-rouge">username</code>. The <code class="language-plaintext highlighter-rouge">ContentView</code> observes changes to the <code class="language-plaintext highlighter-rouge">userData</code> object using <code class="language-plaintext highlighter-rouge">@ObservedObject</code>. Whenever the <code class="language-plaintext highlighter-rouge">username</code> changes, SwiftUI automatically updates the view to reflect the new value.</p>

<p>Read more about <a href="https://developer.apple.com/documentation/combine/observableobject">@ObservableObject</a> and <a href="https://developer.apple.com/documentation/swiftui/observedobject">ObservedObject</a></p>

<h2 id="environmentobject">@EnvironmentObject</h2>

<p>The <code class="language-plaintext highlighter-rouge">@EnvironmentObject</code> property wrapper facilitates sharing data across multiple views within a SwiftUI app. It allows for a centralized data store that can be accessed and modified by any view in the view hierarchy.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">SwiftUI</span>

<span class="kd">class</span> <span class="kt">UserData</span><span class="p">:</span> <span class="kt">ObservableObject</span> <span class="p">{</span>
    <span class="kd">@Published</span> <span class="k">var</span> <span class="nv">isLoggedIn</span> <span class="o">=</span> <span class="kc">false</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="kd">@EnvironmentObject</span> <span class="k">var</span> <span class="nv">userData</span><span class="p">:</span> <span class="kt">UserData</span>
    
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">VStack</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">userData</span><span class="o">.</span><span class="n">isLoggedIn</span> <span class="p">{</span>
                <span class="kt">Text</span><span class="p">(</span><span class="s">"Welcome!"</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="kt">Button</span><span class="p">(</span><span class="s">"Log In"</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">userData</span><span class="o">.</span><span class="n">isLoggedIn</span> <span class="o">=</span> <span class="kc">true</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">AppView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">ContentView</span><span class="p">()</span>
            <span class="o">.</span><span class="nf">environmentObject</span><span class="p">(</span><span class="kt">UserData</span><span class="p">())</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In this example, <code class="language-plaintext highlighter-rouge">UserData</code> is an observable object with a published property called <code class="language-plaintext highlighter-rouge">isLoggedIn</code>. The <code class="language-plaintext highlighter-rouge">userData</code> object is injected into the environment using <code class="language-plaintext highlighter-rouge">@EnvironmentObject</code>. Any changes to <code class="language-plaintext highlighter-rouge">isLoggedIn</code> in any view will automatically update all views that observe the <code class="language-plaintext highlighter-rouge">userData</code> object.</p>

<p>Read more about <a href="https://developer.apple.com/documentation/swiftui/environmentobject">@EnvironmentObject</a></p>

<h2 id="stateobject">@StateObject</h2>

<p>Introduced in iOS 14, the <code class="language-plaintext highlighter-rouge">@StateObject</code> property wrapper is used for managing the lifecycle of an observable object within a view. It ensures that the object is instantiated only once during the view’s lifetime.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">SwiftUI</span>

<span class="kd">class</span> <span class="kt">DataProvider</span><span class="p">:</span> <span class="kt">ObservableObject</span> <span class="p">{</span>
    <span class="kd">@Published</span> <span class="k">var</span> <span class="nv">data</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">"Initial Data"</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="kd">@StateObject</span> <span class="k">var</span> <span class="nv">dataProvider</span> <span class="o">=</span> <span class="kt">DataProvider</span><span class="p">()</span>
    
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">Text</span><span class="p">(</span><span class="n">dataProvider</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
            <span class="o">.</span><span class="n">onTapGesture</span> <span class="p">{</span>
                <span class="n">dataProvider</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="s">"Updated Data"</span>
            <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In this example, <code class="language-plaintext highlighter-rouge">@StateObject</code> is used to create an instance of <code class="language-plaintext highlighter-rouge">DataProvider</code> within the <code class="language-plaintext highlighter-rouge">ContentView</code>. The <code class="language-plaintext highlighter-rouge">DataProvider</code> object is automatically instantiated and managed by SwiftUI. Any changes to the <code class="language-plaintext highlighter-rouge">dataProvider</code> object will automatically update the view.</p>

<p>Read more about <a href="https://developer.apple.com/documentation/swiftui/stateobject">@StateObject</a></p>

<h2 id="environment">@Environment</h2>

<p>The <code class="language-plaintext highlighter-rouge">@Environment</code> property wrapper allows accessing values stored in the environment of a view, such as the color scheme, locale, or size category.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">SwiftUI</span>

<span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="kd">@Environment</span><span class="p">(\</span><span class="o">.</span><span class="n">colorScheme</span><span class="p">)</span> <span class="k">var</span> <span class="nv">colorScheme</span>
    
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">Text</span><span class="p">(</span><span class="s">"Current Color Scheme: </span><span class="se">\(</span><span class="n">colorScheme</span><span class="o">.</span><span class="n">description</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In this example, <code class="language-plaintext highlighter-rouge">@Environment</code> is used to access the color scheme environment value. The text dynamically updates based on the current color scheme (light or dark) of the app.</p>

<p>Read more about <a href="https://developer.apple.com/documentation/swiftui/environment">@Environment</a></p>

<h2 id="summary">Summary</h2>

<p>SwiftUI offers a rich set of property wrappers and techniques for managing state within your app. By leveraging <code class="language-plaintext highlighter-rouge">@State</code>, <code class="language-plaintext highlighter-rouge">@Binding</code>, <code class="language-plaintext highlighter-rouge">ObservableObject</code>, <code class="language-plaintext highlighter-rouge">@EnvironmentObject</code>, <code class="language-plaintext highlighter-rouge">@StateObject</code>, and <code class="language-plaintext highlighter-rouge">@Environment</code>, you can create highly responsive and interactive user interfaces.</p>

<hr />

<h3 id="state-management-property-wrapper-quick-reference">State Management Property Wrapper Quick Reference</h3>

<table>
  <thead>
    <tr>
      <th>Property Wrapper</th>
      <th>Documentation Link</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>@State</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/state">State</a></td>
    </tr>
    <tr>
      <td>@Binding</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/binding">Binding</a></td>
    </tr>
    <tr>
      <td>@ObservedObject</td>
      <td><a href="https://developer.apple.com/documentation/combine/observableobject">ObservableObject</a></td>
    </tr>
    <tr>
      <td>@EnvironmentObject</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/environmentobject">EnvironmentObject</a></td>
    </tr>
    <tr>
      <td>@StateObject</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/stateobject">StateObject</a></td>
    </tr>
    <tr>
      <td>@Environment</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/environment">Environment</a></td>
    </tr>
  </tbody>
</table>

<hr />

<p>This comprehensive guide covers various state management techniques in SwiftUI, providing you with the knowledge and tools to build robust and reactive applications. For more in-depth information, refer to the official documentation provided for each property wrapper.</p>]]></content><author><name>Usman Saeed</name><email>itsusman.saeed@gmail.com</email></author><category term="SwiftUI" /><summary type="html"><![CDATA[State management is crucial in SwiftUI for building responsive and dynamic user interfaces. SwiftUI provides various property wrappers and techniques to handle state effectively, enabling you to create interactive applications.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://m-usmansaeed.github.io/cwu/cwu/public/1-modifiers.jpg" /><media:content medium="image" url="https://m-usmansaeed.github.io/cwu/cwu/public/1-modifiers.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Elevate Your SwiftUI User Interface with Modifiers</title><link href="https://m-usmansaeed.github.io/cwu/2024/05/03/exploring-modifiers-in-swiftui/" rel="alternate" type="text/html" title="Elevate Your SwiftUI User Interface with Modifiers" /><published>2024-05-03T00:00:00+05:00</published><updated>2024-05-03T00:00:00+05:00</updated><id>https://m-usmansaeed.github.io/cwu/2024/05/03/exploring-modifiers-in-swiftui</id><content type="html" xml:base="https://m-usmansaeed.github.io/cwu/2024/05/03/exploring-modifiers-in-swiftui/"><![CDATA[<p>Welcome to the world of SwiftUI modifiers, where you can transform and style your user interface with elegance and simplicity. Modifiers are powerful tools that allow you to customize the appearance and behavior of views in SwiftUI. In this article, we’ll explore the magic of modifiers and how you can use them creatively to enhance your app’s user experience.</p>

<h2 id="what-are-modifiers">What are Modifiers?</h2>

<p>In SwiftUI, modifiers are methods that you can chain onto views to change their properties, such as font, color, size, alignment, and more. They allow for a declarative and concise way of specifying how views should look and behave.</p>

<p>Let’s dive into some examples to see modifiers in action!</p>

<h3 id="changing-text-appearance">Changing Text Appearance</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">SwiftUI</span>

<span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">Text</span><span class="p">(</span><span class="s">"Hello, SwiftUI!"</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">font</span><span class="p">(</span><span class="o">.</span><span class="n">title</span><span class="p">)</span> <span class="c1">// Set font size</span>
            <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">white</span><span class="p">)</span> <span class="c1">// Set text color</span>
            <span class="o">.</span><span class="nf">padding</span><span class="p">()</span> <span class="c1">// Add padding around the text</span>
            <span class="o">.</span><span class="nf">background</span><span class="p">(</span><span class="kt">Color</span><span class="o">.</span><span class="n">pink</span><span class="p">)</span> <span class="c1">// Set background color</span>
            <span class="o">.</span><span class="nf">cornerRadius</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c1">// Round the corners</span>
            <span class="o">.</span><span class="nf">shadow</span><span class="p">(</span><span class="nv">radius</span><span class="p">:</span> <span class="mi">5</span><span class="p">)</span> <span class="c1">// Add a shadow</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/cwu/public/1-modifiers.jpg" alt="1" /></p>

<table>
  <thead>
    <tr>
      <th>Action</th>
      <th>Documentation</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Text</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/text">Text</a></td>
    </tr>
    <tr>
      <td>Set font size</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/text/font(_:)">.font</a></td>
    </tr>
    <tr>
      <td>Set text color</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/view/foregroundcolor(_:)">.foregroundColor</a></td>
    </tr>
    <tr>
      <td>Add padding around the text</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/view/padding(_:)">.padding</a></td>
    </tr>
    <tr>
      <td>Set background color</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/view/background(_:)">.background</a></td>
    </tr>
    <tr>
      <td>Round the corners</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/view/cornerradius(_:)">.cornerRadius</a></td>
    </tr>
    <tr>
      <td>Add a shadow</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/view/shadow(_:)">.shadow</a></td>
    </tr>
  </tbody>
</table>

<p>This table neatly organizes each action alongside its corresponding documentation link.</p>

<h3 id="creating-a-custom-button">Creating a Custom Button</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">Button</span><span class="p">(</span><span class="nv">action</span><span class="p">:</span> <span class="p">{</span>
            <span class="c1">// Action to be performed when the button is tapped</span>
        <span class="p">})</span> <span class="p">{</span>
            <span class="kt">Text</span><span class="p">(</span><span class="s">"Tap Me!"</span><span class="p">)</span>
                <span class="o">.</span><span class="nf">fontWeight</span><span class="p">(</span><span class="o">.</span><span class="n">bold</span><span class="p">)</span> <span class="c1">// Set font weight</span>
                <span class="o">.</span><span class="nf">padding</span><span class="p">()</span> <span class="c1">// Add padding around the text</span>
                <span class="o">.</span><span class="nf">background</span><span class="p">(</span><span class="kt">Color</span><span class="o">.</span><span class="n">blue</span><span class="p">)</span> <span class="c1">// Set background color</span>
                <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">white</span><span class="p">)</span> <span class="c1">// Set text color</span>
                <span class="o">.</span><span class="nf">cornerRadius</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="c1">// Round the corners</span>
                <span class="o">.</span><span class="nf">shadow</span><span class="p">(</span><span class="nv">color</span><span class="p">:</span> <span class="o">.</span><span class="n">gray</span><span class="p">,</span> <span class="nv">radius</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="nv">x</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">// Add a shadow</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/cwu/public/2-modifiers.jpg" alt="1" /></p>

<table>
  <thead>
    <tr>
      <th>Action</th>
      <th>Documentation</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Button</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/button">Button</a></td>
    </tr>
    <tr>
      <td>Set font weight</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/view/fontweight(_:)">.fontWeight</a></td>
    </tr>
    <tr>
      <td>Add padding around the text</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/view/padding(_:)">.padding</a></td>
    </tr>
    <tr>
      <td>Set background color</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/view/background(_:)">.background</a></td>
    </tr>
    <tr>
      <td>Set text color</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/view/foregroundcolor(_:)">.foregroundColor</a></td>
    </tr>
    <tr>
      <td>Round the corners</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/view/cornerradius(_:)">.cornerRadius</a></td>
    </tr>
    <tr>
      <td>Add a shadow</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/view/shadow(_:)">.shadow</a></td>
    </tr>
  </tbody>
</table>

<p>This table neatly organizes each action alongside its corresponding documentation link.</p>

<h3 id="dynamic-layout-with-stacks-and-spacers">Dynamic Layout with Stacks and Spacers</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">VStack</span> <span class="p">{</span>
            <span class="kt">Text</span><span class="p">(</span><span class="s">"Welcome to SwiftUI!"</span><span class="p">)</span>
                <span class="o">.</span><span class="nf">font</span><span class="p">(</span><span class="o">.</span><span class="n">largeTitle</span><span class="p">)</span> <span class="c1">// Set font size</span>
                <span class="o">.</span><span class="nf">padding</span><span class="p">(</span><span class="o">.</span><span class="n">bottom</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span> <span class="c1">// Add bottom padding</span>
            
            <span class="kt">HStack</span> <span class="p">{</span>
                <span class="kt">Image</span><span class="p">(</span><span class="nv">systemName</span><span class="p">:</span> <span class="s">"star.fill"</span><span class="p">)</span>
                    <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">yellow</span><span class="p">)</span> <span class="c1">// Set image color</span>
                <span class="kt">Text</span><span class="p">(</span><span class="s">"SwiftUI"</span><span class="p">)</span>
                    <span class="o">.</span><span class="nf">font</span><span class="p">(</span><span class="o">.</span><span class="n">headline</span><span class="p">)</span> <span class="c1">// Set font size</span>
                    <span class="o">.</span><span class="nf">fontWeight</span><span class="p">(</span><span class="o">.</span><span class="n">bold</span><span class="p">)</span> <span class="c1">// Set font weight</span>
                    <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">white</span><span class="p">)</span>
            <span class="p">}</span>
            <span class="o">.</span><span class="nf">padding</span><span class="p">()</span> <span class="c1">// Add padding around the stack</span>
            <span class="o">.</span><span class="nf">background</span><span class="p">(</span><span class="kt">Color</span><span class="o">.</span><span class="n">green</span><span class="p">)</span> <span class="c1">// Set background color</span>
            <span class="o">.</span><span class="nf">cornerRadius</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c1">// Round the corners</span>
            
            <span class="kt">Spacer</span><span class="p">()</span> <span class="c1">// Add flexible space</span>
            
            <span class="kt">Text</span><span class="p">(</span><span class="s">"Let's build amazing apps!"</span><span class="p">)</span>
                <span class="o">.</span><span class="nf">font</span><span class="p">(</span><span class="o">.</span><span class="n">title3</span><span class="p">)</span> <span class="c1">// Set font size</span>
        <span class="p">}</span>
        <span class="o">.</span><span class="nf">padding</span><span class="p">()</span> <span class="c1">// Add padding around the VStack</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/cwu/public/3-modifiers.jpg" alt="1" /></p>

<table>
  <thead>
    <tr>
      <th>Action</th>
      <th>Documentation</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>VStack</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/vstack">VStack</a></td>
    </tr>
    <tr>
      <td>Set font size</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/text">Text</a></td>
    </tr>
    <tr>
      <td>Add bottom padding</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/text/font(_:)">.font</a></td>
    </tr>
    <tr>
      <td>Set image color</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/view/foregroundcolor(_:)">.foregroundColor</a></td>
    </tr>
    <tr>
      <td>Add padding around the stack</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/view/padding(_:)">.padding</a></td>
    </tr>
    <tr>
      <td>Set background color</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/view/background(_:)">.background</a></td>
    </tr>
    <tr>
      <td>Round the corners</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/view/cornerradius(_:)">.cornerRadius</a></td>
    </tr>
    <tr>
      <td>Add flexible space</td>
      <td><a href="https://developer.apple.com/documentation/swiftui/spacer">Spacer</a></td>
    </tr>
  </tbody>
</table>

<p>This table neatly organizes each action alongside its corresponding documentation link.</p>

<p>Let’s explore some additional unique examples of SwiftUI modifiers:</p>

<h3 id="rotating-a-text-view">Rotating a Text View</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">Text</span><span class="p">(</span><span class="s">"Hello, SwiftUI!"</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">font</span><span class="p">(</span><span class="o">.</span><span class="n">title</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">blue</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">rotationEffect</span><span class="p">(</span><span class="o">.</span><span class="nf">degrees</span><span class="p">(</span><span class="mi">45</span><span class="p">))</span> <span class="c1">// Rotate the text by 45 degrees</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Rotate the text by 45 degrees <a href="https://developer.apple.com/documentation/swiftui/view/rotationeffect(_:)">.rotationEffect</a></p>

<h3 id="creating-a-gradient-background">Creating a Gradient Background</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">Text</span><span class="p">(</span><span class="s">"Welcome to SwiftUI!"</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">font</span><span class="p">(</span><span class="o">.</span><span class="n">largeTitle</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">white</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">padding</span><span class="p">()</span>
            <span class="o">.</span><span class="nf">background</span><span class="p">(</span><span class="kt">LinearGradient</span><span class="p">(</span><span class="nv">gradient</span><span class="p">:</span> <span class="kt">Gradient</span><span class="p">(</span><span class="nv">colors</span><span class="p">:</span> <span class="p">[</span><span class="o">.</span><span class="n">blue</span><span class="p">,</span> <span class="o">.</span><span class="n">green</span><span class="p">]),</span> <span class="nv">startPoint</span><span class="p">:</span> <span class="o">.</span><span class="n">topLeading</span><span class="p">,</span> <span class="nv">endPoint</span><span class="p">:</span> <span class="o">.</span><span class="n">bottomTrailing</span><span class="p">))</span> <span class="c1">// Apply gradient background</span>
            <span class="o">.</span><span class="nf">cornerRadius</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Apply gradient background <a href="https://developer.apple.com/documentation/swiftui/lineargradient">LinearGradient</a></p>

<p><img src="/cwu/public/4-modifiers.jpg" alt="1" /></p>

<h3 id="scaling-an-image">Scaling an Image</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">Image</span><span class="p">(</span><span class="nv">systemName</span><span class="p">:</span> <span class="s">"star.fill"</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">yellow</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">font</span><span class="p">(</span><span class="o">.</span><span class="nf">system</span><span class="p">(</span><span class="nv">size</span><span class="p">:</span> <span class="mi">100</span><span class="p">))</span>
            <span class="o">.</span><span class="nf">scaleEffect</span><span class="p">(</span><span class="mf">2.0</span><span class="p">)</span> <span class="c1">// Scale the image by a factor of 2</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Scale the image by a factor of 2 <a href="https://developer.apple.com/documentation/swiftui/view/scaleeffect(_:)">.scaleEffect</a></p>

<p><img src="/cwu/public/5-modifiers.jpg" alt="1" /></p>

<h3 id="applying-blur-effect">Applying Blur Effect</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">Text</span><span class="p">(</span><span class="s">"SwiftUI"</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">font</span><span class="p">(</span><span class="o">.</span><span class="n">largeTitle</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">padding</span><span class="p">()</span>
            <span class="o">.</span><span class="nf">background</span><span class="p">(</span><span class="kt">Color</span><span class="o">.</span><span class="n">blue</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">white</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">cornerRadius</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">blur</span><span class="p">(</span><span class="nv">radius</span><span class="p">:</span> <span class="mi">5</span><span class="p">)</span> <span class="c1">// Apply blur effect</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Apply blur effect <a href="https://developer.apple.com/documentation/swiftui/view/blur(_:)">.blur</a></p>

<h3 id="creating-a-custom-border">Creating a Custom Border</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">Text</span><span class="p">(</span><span class="s">"Hello, SwiftUI!"</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">font</span><span class="p">(</span><span class="o">.</span><span class="n">title</span><span class="p">)</span><span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">](</span><span class="o">/</span><span class="n">assets</span><span class="o">/</span><span class="mi">1</span><span class="o">.</span><span class="n">jpg</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">padding</span><span class="p">()</span>
            <span class="o">.</span><span class="nf">border</span><span class="p">(</span><span class="kt">Color</span><span class="o">.</span><span class="n">red</span><span class="p">,</span> <span class="nv">width</span><span class="p">:</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">// Apply a red border with width 2</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Apply a red border with width 2 <a href="https://developer.apple.com/documentation/swiftui/view/border(_:width:)">.border</a></p>

<h3 id="rotating-3d-cube">Rotating 3D Cube</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="kd">@State</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">rotationAngle</span><span class="p">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="mi">0</span>
    
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">VStack</span> <span class="p">{</span>
            <span class="kt">Button</span> <span class="p">{</span>
                <span class="n">rotationAngle</span> <span class="o">+=</span> <span class="mi">360</span>
            <span class="p">}</span> <span class="nv">label</span><span class="p">:</span> <span class="p">{</span>
                <span class="kt">Text</span><span class="p">(</span><span class="s">"Tap Me!"</span><span class="p">)</span>
                    <span class="o">.</span><span class="nf">fontWeight</span><span class="p">(</span><span class="o">.</span><span class="n">bold</span><span class="p">)</span> <span class="c1">// Set font weight</span>
                    <span class="o">.</span><span class="nf">padding</span><span class="p">()</span> <span class="c1">// Add padding around the text</span>
                    <span class="o">.</span><span class="nf">background</span><span class="p">(</span><span class="kt">Color</span><span class="o">.</span><span class="n">blue</span><span class="p">)</span> <span class="c1">// Set background color</span>
                    <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">white</span><span class="p">)</span> <span class="c1">// Set text color</span>
                    <span class="o">.</span><span class="nf">cornerRadius</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="c1">// Round the corners</span>
                    <span class="o">.</span><span class="nf">shadow</span><span class="p">(</span><span class="nv">color</span><span class="p">:</span> <span class="o">.</span><span class="n">gray</span><span class="p">,</span> <span class="nv">radius</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="nv">x</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">// Add a shadow</span>
            <span class="p">}</span>
            
            <span class="kt">Spacer</span><span class="p">()</span>
            <span class="kt">CubeView</span><span class="p">()</span>
                <span class="o">.</span><span class="nf">rotation3DEffect</span><span class="p">(</span>
                    <span class="o">.</span><span class="nf">degrees</span><span class="p">(</span><span class="n">rotationAngle</span><span class="p">),</span>
                    <span class="nv">axis</span><span class="p">:</span> <span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">z</span><span class="p">:</span> <span class="mi">1</span><span class="p">))</span>
                <span class="o">.</span><span class="nf">animation</span><span class="p">(</span><span class="o">.</span><span class="nf">easeInOut</span><span class="p">(</span><span class="nv">duration</span><span class="p">:</span> <span class="mf">2.0</span><span class="p">))</span>
            <span class="kt">Spacer</span><span class="p">()</span>
        <span class="p">}</span><span class="o">.</span><span class="nf">padding</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">CubeView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">RoundedRectangle</span><span class="p">(</span><span class="nv">cornerRadius</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">fill</span><span class="p">(</span><span class="kt">Color</span><span class="o">.</span><span class="n">blue</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">width</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mi">200</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Apply 3D rotation effect <a href="https://developer.apple.com/documentation/swiftui/view/rotation3deffect(_:axis:anchor:anchorZ:perspective:)">.rotation3DEffect</a>
and adding animations <a href="https://developer.apple.com/documentation/swiftui/view/animation(_:)">.animation</a></p>

<p><img src="/cwu/public/6-modifiers.jpg" alt="1" /></p>

<h2 id="conclusion">Conclusion</h2>

<p>Modifiers are a fundamental aspect of SwiftUI that empower you to customize your app’s UI with precision and creativity. By chaining together various modifiers, you can achieve sophisticated designs while maintaining a clean and readable codebase.</p>

<p>To explore more about modifiers and their capabilities, refer to the <a href="https://developer.apple.com/documentation/swiftui/view">official SwiftUI documentation</a>.</p>

<p>Start experimenting with modifiers in your SwiftUI projects today and unleash your creativity to craft stunning user interfaces that stand out!</p>]]></content><author><name>Usman Saeed</name><email>itsusman.saeed@gmail.com</email></author><category term="SwiftUI" /><summary type="html"><![CDATA[Welcome to the world of SwiftUI modifiers, where you can transform and style your user interface with elegance and simplicity. Modifiers are powerful tools that allow you to customize the appearance and behavior of views in SwiftUI. In this article, we’ll explore the magic of modifiers and how you can use them creatively to enhance your app’s user experience.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://m-usmansaeed.github.io/cwu/cwu/public/1-modifiers.jpg" /><media:content medium="image" url="https://m-usmansaeed.github.io/cwu/cwu/public/1-modifiers.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Exploring Views in SwiftUI</title><link href="https://m-usmansaeed.github.io/cwu/2024/05/02/exploring-views-in-swiftui/" rel="alternate" type="text/html" title="Exploring Views in SwiftUI" /><published>2024-05-02T00:00:00+05:00</published><updated>2024-05-02T00:00:00+05:00</updated><id>https://m-usmansaeed.github.io/cwu/2024/05/02/exploring-views-in-swiftui</id><content type="html" xml:base="https://m-usmansaeed.github.io/cwu/2024/05/02/exploring-views-in-swiftui/"><![CDATA[<p>In SwiftUI, <strong>Views</strong> are the fundamental building blocks for constructing user interfaces. They represent everything from simple text labels to complex interactive elements. Understanding how to work with Views is essential for creating engaging and dynamic UI experiences.</p>

<h2 id="what-are-views">What are Views?</h2>

<p>In the context of SwiftUI, a <strong>View</strong> is a protocol that defines the structure and behavior of a UI element. Views can be anything from a basic text label (<code class="language-plaintext highlighter-rouge">Text</code>) to a more complex layout composed of multiple subviews. Views are composable, meaning you can combine them together to create more sophisticated interfaces.</p>

<h2 id="creating-views">Creating Views</h2>

<p>Creating a simple view in SwiftUI is straightforward. Let’s start with a basic example:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">SwiftUI</span>

<span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">Text</span><span class="p">(</span><span class="s">"Hello, SwiftUI!"</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">font</span><span class="p">(</span><span class="o">.</span><span class="n">title</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">blue</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/cwu/public/1-swiftui-views.jpg" alt="1" /></p>

<p>In this example, we’ve created a <code class="language-plaintext highlighter-rouge">Text</code> view that displays the text “Hello, SwiftUI!” with a title font and blue color. SwiftUI provides a rich set of modifiers, such as <code class="language-plaintext highlighter-rouge">.font()</code> and <code class="language-plaintext highlighter-rouge">.foregroundColor()</code>, to customize the appearance of views.</p>

<h2 id="composing-views">Composing Views</h2>

<p>One of the strengths of SwiftUI is its composability. You can easily compose multiple views together to create more complex interfaces. Here’s an example of composing views using stacks:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">VStack</span> <span class="p">{</span>
            <span class="kt">Text</span><span class="p">(</span><span class="s">"Welcome to"</span><span class="p">)</span>
                <span class="o">.</span><span class="nf">font</span><span class="p">(</span><span class="o">.</span><span class="n">title</span><span class="p">)</span>
            <span class="kt">Text</span><span class="p">(</span><span class="s">"SwiftUI"</span><span class="p">)</span>
                <span class="o">.</span><span class="nf">font</span><span class="p">(</span><span class="o">.</span><span class="n">largeTitle</span><span class="p">)</span>
                <span class="o">.</span><span class="nf">fontWeight</span><span class="p">(</span><span class="o">.</span><span class="n">bold</span><span class="p">)</span>
                <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">blue</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/cwu/public/2-swiftui-views.jpg" alt="1" /></p>

<p>In this example, we’ve used a <code class="language-plaintext highlighter-rouge">VStack</code> to stack two <code class="language-plaintext highlighter-rouge">Text</code> views vertically. This results in a UI where the second text appears below the first text, creating a visually pleasing layout.</p>

<h2 id="modifying-views">Modifying Views</h2>

<p>SwiftUI provides a wide range of modifiers that you can use to modify the appearance and behavior of views. Let’s add a button to our previous example and apply some modifiers to it:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">VStack</span> <span class="p">{</span>
            <span class="kt">Text</span><span class="p">(</span><span class="s">"Welcome to SwiftUI"</span><span class="p">)</span>
                <span class="o">.</span><span class="nf">font</span><span class="p">(</span><span class="o">.</span><span class="n">title</span><span class="p">)</span>
            <span class="kt">Button</span><span class="p">(</span><span class="nv">action</span><span class="p">:</span> <span class="p">{</span>
                <span class="c1">// Action to be performed when the button is tapped</span>
            <span class="p">})</span> <span class="p">{</span>
                <span class="kt">Text</span><span class="p">(</span><span class="s">"Get Started"</span><span class="p">)</span>
                    <span class="o">.</span><span class="nf">fontWeight</span><span class="p">(</span><span class="o">.</span><span class="n">bold</span><span class="p">)</span>
                    <span class="o">.</span><span class="nf">padding</span><span class="p">()</span>
                    <span class="o">.</span><span class="nf">background</span><span class="p">(</span><span class="kt">Color</span><span class="o">.</span><span class="n">blue</span><span class="p">)</span>
                    <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">white</span><span class="p">)</span>
                    <span class="o">.</span><span class="nf">cornerRadius</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/cwu/public/3-swiftui-views.jpg" alt="1" /></p>

<p>In this example, we’ve added a <code class="language-plaintext highlighter-rouge">Button</code> view with a closure that defines the action to be performed when the button is tapped. We’ve also applied various modifiers to customize the appearance of the button, such as setting the background color, text color, and corner radius.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Views are the building blocks of SwiftUI, allowing you to create dynamic and interactive user interfaces with ease. By understanding how to create, compose, and modify views, you can unleash the full power of SwiftUI to design beautiful and intuitive apps.</p>

<p>To learn more about Views and other SwiftUI concepts, check out the <a href="https://developer.apple.com/documentation/swiftui">official documentation</a> provided by Apple.</p>]]></content><author><name>Usman Saeed</name><email>itsusman.saeed@gmail.com</email></author><category term="SwiftUI" /><summary type="html"><![CDATA[In SwiftUI, Views are the fundamental building blocks for constructing user interfaces. They represent everything from simple text labels to complex interactive elements. Understanding how to work with Views is essential for creating engaging and dynamic UI experiences.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://m-usmansaeed.github.io/cwu/public/" /><media:content medium="image" url="https://m-usmansaeed.github.io/cwu/public/" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>